#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPIUtility.LinqToSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	using WebAPIUtility.Help;


	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MPS_PM")]
	public partial class WorkingDayDataClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkingDayModel(WorkingDayModel instance);
    partial void UpdateWorkingDayModel(WorkingDayModel instance);
    partial void DeleteWorkingDayModel(WorkingDayModel instance);
		#endregion

		public WorkingDayDataClassDataContext() :
				base(Cryptography.Decrypt(global::System.Configuration.ConfigurationManager.ConnectionStrings["MPS_PMConnectionString"].ConnectionString, "$Mps.ConnStrKey#2022"), mappingSource)
		{
			OnCreated();
		}

		public WorkingDayDataClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorkingDayDataClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorkingDayDataClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WorkingDayDataClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkingDayModel> WorkingDayModels
		{
			get
			{
				return this.GetTable<WorkingDayModel>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SPM_WORKING_DAY_VEW")]
	public partial class WorkingDayModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _WorkingDay;
		
		private byte _WeekNumber;
		
		private short _Year;
		
		private byte _Month;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWorkingDayChanging(System.DateTime value);
    partial void OnWorkingDayChanged();
    partial void OnWeekNumberChanging(byte value);
    partial void OnWeekNumberChanged();
    partial void OnYearChanging(short value);
    partial void OnYearChanged();
    partial void OnMonthChanging(byte value);
    partial void OnMonthChanged();
    #endregion
		
		public WorkingDayModel()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ID", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="WORKING_DAY", Storage="_WorkingDay", DbType="Date NOT NULL")]
		public System.DateTime WorkingDay
		{
			get
			{
				return this._WorkingDay;
			}
			set
			{
				if ((this._WorkingDay != value))
				{
					this.OnWorkingDayChanging(value);
					this.SendPropertyChanging();
					this._WorkingDay = value;
					this.SendPropertyChanged("WorkingDay");
					this.OnWorkingDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="WEEK_NUMBER", Storage="_WeekNumber", DbType="TinyInt NOT NULL")]
		public byte WeekNumber
		{
			get
			{
				return this._WeekNumber;
			}
			set
			{
				if ((this._WeekNumber != value))
				{
					this.OnWeekNumberChanging(value);
					this.SendPropertyChanging();
					this._WeekNumber = value;
					this.SendPropertyChanged("WeekNumber");
					this.OnWeekNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="YEAR", Storage="_Year", DbType="SmallInt NOT NULL")]
		public short Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MONTH", Storage="_Month", DbType="TinyInt NOT NULL")]
		public byte Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
